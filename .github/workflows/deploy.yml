name: Deploy Medical Dashboard Django App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Set up environment variables
          export DB_NAME=medicdashboard
          export DB_USER=postgres
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}"
          export ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"
          export ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
          export DEBUG=False
          export ALLOWED_HOSTS="87.107.111.36,localhost,127.0.0.1"
          
          # Create app directory
          APP_DIR="/opt/medical-dashboard"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker compose down || true
          
          # Clone or update repository
          if [ -d ".git" ]; then
            echo "📥 Pulling latest changes..."
            git pull origin main
          else
            echo "📥 Cloning repository..."
            git clone https://github.com/iman244/dashboard-django.git .
          fi
          
          # Create temporary environment file for Docker Compose
          echo "📝 Creating environment file for Docker Compose..."
          echo "DB_NAME=medicdashboard" > .env
          echo "DB_USER=postgres" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}" >> .env
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=87.107.111.36,localhost,127.0.0.1" >> .env
          
          # Build and start containers
          echo "🔨 Building and starting containers..."
          docker compose up -d --build --quiet-pull
          
          # Wait for database to be ready
          echo "⏳ Waiting for database to be ready..."
          sleep 20
          
          # Check database connection
          echo "🔍 Checking database connection..."
          docker compose exec -T web python manage.py check --database default --verbosity=0
          
          # Run Django migrations
          echo "🗄️ Running Django migrations..."
          docker compose exec -T web python manage.py migrate --verbosity=0
          
          # Create superuser if it doesn't exist (using environment variables)
          echo "👤 Checking for superuser..."
          docker compose exec -T web python manage.py shell -c "
          import os
          from django.contrib.auth import get_user_model
          User = get_user_model()
          admin_username = os.getenv('ADMIN_USERNAME', 'admin')
          admin_email = os.getenv('ADMIN_EMAIL', 'admin@example.com')
          admin_password = os.getenv('ADMIN_PASSWORD')
          print(f'Admin username: {admin_username}')
          print(f'Admin email: {admin_email}')
          print(f'Password provided: {bool(admin_password)}')
          print(f'User exists: {User.objects.filter(username=admin_username).exists()}')
          if admin_password and not User.objects.filter(username=admin_username).exists():
              User.objects.create_superuser(admin_username, admin_email, admin_password)
              print('✅ Superuser created: ' + admin_username)
          elif User.objects.filter(username=admin_username).exists():
              print('✅ Superuser already exists')
          else:
              print('❌ No password provided for superuser creation')
          "
          
          # Collect static files
          echo "📦 Collecting static files..."
          docker compose exec -T web python manage.py collectstatic --noinput --verbosity=0
          
          # Show running containers
          echo "📊 Checking container status..."
          docker compose ps
          
          # Clean up temporary environment file
          echo "🧹 Cleaning up temporary files..."
          rm -f .env
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Your app should be available at: http://87.107.111.36:8000"
